from __future__ import annotations

import os
import random
from dataclasses import dataclass
from typing import List

from dotenv import load_dotenv
from telebot import TeleBot, custom_filters, types
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage

from . import db

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
load_dotenv(os.path.join(BASE_DIR, ".env"))

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
if not BOT_TOKEN:–∂
    raise RuntimeError("BOT_TOKEN is not set")

state_storage = StateMemoryStorage()
bot = TeleBot(BOT_TOKEN, state_storage=state_storage, parse_mode="HTML")


WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n\n"
    "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, "
    "–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n"
    "–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n\n"
    "–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n"
    "—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n\n"
    "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è"
)


class Command:
    ADD_WORD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
    DELETE_WORD = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô"
    NEXT = "–î–∞–ª—å—à–µ ‚è≠"


class MyStates(StatesGroup):
    adding_word = State()  # –∂–¥—ë–º –≤–≤–æ–¥ –ø–∞—Ä—ã "ru - en" –∏–ª–∏ "en - ru"


@dataclass
class Quiz:
    source: str  # 'global' | 'user'
    word_id: int
    ru: str
    en: str
    options: List[str]



def _keyboard(options: List[str]) -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    for opt in options:
        kb.add(types.KeyboardButton(opt))
    kb.add(types.KeyboardButton(Command.NEXT))
    kb.add(types.KeyboardButton(Command.ADD_WORD))
    kb.add(types.KeyboardButton(Command.DELETE_WORD))
    return kb



def _prepare_quiz(user_id: int) -> Quiz | None:
    words = db.available_words(user_id)
    if len(words) < 4:
        return None
    target = random.choice(words)
    pool = [w for w in words if w["en"].lower() != target["en"].lower()]
    distractors = random.sample(pool, 3)
    options = [target["en"], *(d["en"] for d in distractors)]
    random.shuffle(options)
    return Quiz(
        source=str(target["source"]),
        word_id=int(target["id"]),
        ru=str(target["ru"]),
        en=str(target["en"]),
        options=options,
    )


@bot.message_handler(commands=["start"])
def start(message):
    tg = message.from_user
    user_id = db.get_or_create_user(tg.id, tg.username, tg.first_name)
    bot.send_message(message.chat.id, WELCOME)
    _ask_question(message.chat.id, user_id)


@bot.message_handler(func=lambda m: m.text == Command.NEXT)
def next_question(message):
    tg = message.from_user
    user_id = db.get_or_create_user(tg.id, tg.username, tg.first_name)
    _ask_question(message.chat.id, user_id)


def _ask_question(chat_id: int, user_id: int) -> None:
    quiz = _prepare_quiz(user_id)
    if not quiz:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(types.KeyboardButton(Command.ADD_WORD))
        bot.send_message(
            chat_id,
            (
                "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—å—à–µ 4 —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
                "–î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (¬´–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï¬ª) –∏–ª–∏ –≤–µ—Ä–Ω–∏ —Å–∫—Ä—ã—Ç—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
            ),
            reply_markup=kb,
        )
        return

    bot.set_state(user_id, MyStates.adding_word, chat_id)
    with bot.retrieve_data(user_id, chat_id) as data:
        data["quiz"] = quiz.__dict__

    text = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ <b>{quiz.ru}</b>"
    bot.send_message(chat_id, text, reply_markup=_keyboard(quiz.options))


@bot.message_handler(func=lambda m: m.text == Command.ADD_WORD)
def add_word(message):
    bot.set_state(message.from_user.id, MyStates.adding_word, message.chat.id)
    bot.send_message(
        message.chat.id,
        (
            "–û—Ç–ø—Ä–∞–≤—å —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ <b>ru - en</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–∫–æ—à–∫–∞ - cat</i>) –∏–ª–∏\n"
            "‚Ä¢ <b>en - ru</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>cat - –∫–æ—à–∫–∞</i>)."
        ),
    )


@bot.message_handler(state=MyStates.adding_word, content_types=["text"])
def add_word_save(message):
    tg = message.from_user
    user_id = db.get_or_create_user(tg.id, tg.username, tg.first_name)

    raw = message.text.strip()
    if "-" not in raw:
        bot.reply_to(message, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç: ru - en –∏–ª–∏ en - ru")
        return

    left, right = [p.strip() for p in raw.split("-", 1)]

    if any(ord(c) > 127 for c in left) and all(ord(c) < 128 for c in right):
        ru, en = left, right
    elif all(ord(c) < 128 for c in left) and any(ord(c) > 127 for c in right):
        en, ru = left, right
    else:
        ru, en = left, right

    db.add_user_word(user_id, en=en, ru=ru)
    total = db.user_studied_count(user_id)

    bot.send_message(
        message.chat.id,
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{ru}</b> ‚Üí <b>{en}</b>\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è <b>{total}</b> —Å–ª–æ–≤(–∞) –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
    )

    # üîë –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    bot.delete_state(message.from_user.id, message.chat.id)

    _ask_question(message.chat.id, user_id)


@bot.message_handler(func=lambda m: m.text == Command.DELETE_WORD)
def delete_current_word(message):
    tg = message.from_user
    user_id = db.get_or_create_user(tg.id, tg.username, tg.first_name)
    with bot.retrieve_data(user_id, message.chat.id) as data:
        quiz = data.get("quiz")
    if not quiz:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–∂–º–∏ ¬´–î–∞–ª—å—à–µ ‚è≠¬ª.")
        return

    if quiz["source"] == "global":
        db.hide_global_word_for_user(user_id, quiz["word_id"])
    else:
        db.soft_delete_user_word(quiz["word_id"], user_id)

    bot.send_message(
        message.chat.id,
        f"–°–ª–æ–≤–æ <b>{quiz['ru']}</b> ‚Üí <b>{quiz['en']}</b> —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–≤–æ–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
    )
    _ask_question(message.chat.id, user_id)


@bot.message_handler(content_types=["text"])
def answer_handler(message):
    tg = message.from_user
    user_id = db.get_or_create_user(tg.id, tg.username, tg.first_name)

    quiz = None
    try:
        with bot.retrieve_data(user_id, message.chat.id) as data:
            if data:
                quiz = data.get("quiz")
    except Exception:
        quiz = None

    if not quiz:
        _ask_question(message.chat.id, user_id)
        return

    correct = quiz["en"]
    if message.text.strip().lower() == correct.lower():
        reply = f"–û—Ç–ª–∏—á–Ω–æ! ‚ù§Ô∏è\n<b>{quiz['ru']}</b> ‚Üí <b>{quiz['en']}</b>"
        bot.send_message(message.chat.id, reply)
        _ask_question(message.chat.id, user_id)
    else:
        bot.send_message(
            message.chat.id,
            (
                "–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!\n"
                f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫ <b>{quiz['ru']}</b>"
            ),
            reply_markup=_keyboard(quiz["options"]),
        )



bot.add_custom_filter(custom_filters.StateFilter(bot))

if __name__ == "__main__":
    print("Start telegram bot‚Ä¶")
    bot.infinity_polling(skip_pending=True)


